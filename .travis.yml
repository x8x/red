# Only use continuous integration on the master branch
branches:
  only:
    - ARM


notifications:
  email:
    # Send notifications on every build failure to comitter and author.
    # Never send notifications for sucessful builds.
    on_success: never
#   webhooks:
#     urls:
#     - https://webhooks.gitter.im/e/f9318a4a24c9157f20d1
#     on_success: change  # options: [always|never|change] default: always
#     on_failure: always  # options: [always|never|change] default: always
#     on_start: false     # default: false


# Disables Travis CI's Ruby-specific defaults.
language: c


env:
  global:
    - STATUS=1
    # - secure: "IHmQUKT/8TJ2Qx/AXzyQBruJqGeDvFUwTby8EIDmA+v8/ypJ5VrWDU4w11cdSsgm3+U5w48F9eKq4avQiVFffcY0Z6vpKPbuPn1/AkAHB1qYB20QsOvNrHBGfMGvfu+exNCY8qIifLLGCPYriG84hgW7QHEWLw2NruFLr4HBQ5s="


matrix:
  allow_failures:                       # Remove once ARM build is fixed
  - env: OS=arm                         # Remove once ARM build is fixed
  include:


  ### Linux ############################################################
#   - os: linux
#     dist: trusty
#     sudo: required
#     env: OS=linux
#     script:                                             # Run i386 tests
#     - >
#       docker run -v ${PWD}:/red -w /red
#       i386/debian:red rebol -qws tests/run-all.r --batch
#     - mv quick-test/quick-test.log quick-test/quick-test-red.log
#     - >
#       docker run -v ${PWD}:/red -w /red
#       i386/debian:red rebol -qws system/tests/run-all.r --batch


  ### ARM ##############################################################
  - os: linux
    dist: trusty
    sudo: required
    env: OS=arm
    script:                                          # Run ARMv7hf tests
    - >
      docker run -v ${PWD}:/red
      -w /red/quick-test/runnable/arm-tests/red/
      --entrypoint /red/quick-test/runnable/arm-tests/red/run-all.sh
      balenalib/raspberry-pi2-debian:latest
    - >
      docker run -v ${PWD}:/red
      -e LD_LIBRARY_PATH='$LD_LIBRARY_PATH:/red/quick-test/runnable/arm-tests/system/'
      -w /red/quick-test/runnable/arm-tests/system/
      --entrypoint /red/quick-test/runnable/arm-tests/system/run-all.sh
      balenalib/raspberry-pi2-debian:latest


  ### macOS ############################################################
#   - os: osx
#     env: OS=macos
#     script:                                            # Run macOS tests
#     - rebol -qws tests/run-all.r --batch
#     - mv quick-test/quick-test.log quick-test/quick-test-red.log
#     - rebol -qws system/tests/run-all.r --batch


###### all ##############################################################
install:
  # Linux: hook up qemu, build 32bit image including curl and rebol
  - >
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
    docker run --rm --privileged
    multiarch/qemu-user-static:register &&
    printf
    'FROM i386/debian:latest\n
    RUN apt-get update &&
    apt-get install -y curl libcurl3 &&
    curl -o /bin/rebol https://static.red-lang.org/tmp/rebol &&
    chmod +x /bin/rebol\n
    ' > Dockerfile &&
    docker build -t i386/debian:red . ;
    fi
  # ARM: build tests on i386
  - >
    if [[ ${OS} == "arm" ]]; then
    docker run -v ${PWD}:/red -w /red
    i386/debian:red rebol -qws tests/build-arm-tests.r '-t RPi' &&
    docker run -v ${PWD}:/red -w /red
    i386/debian:red rebol -qws system/tests/build-arm-tests.r '-t RPi' &&
    docker pull balenalib/raspberry-pi2-debian:latest ;
    fi
  # macOS: install rebol
#   - >
#     if [[ ${OS} == "macos" ]]; then
#     sudo curl -o /usr/local/bin/rebol
#     https://static.red-lang.org/tmp/rebol-osx &&
#     sudo chmod +x /usr/local/bin/rebol ;
#     fi


# If tests fail, change status code and save test logs into Travis logs
after_failure:
  - >
    STATUS=0 ;
    if [[ ${OS} == "arm" ]]; then
    cat quick-test/runnable/arm-tests/red/quick-test.log ;
    printf '\n\n\n\n' ;
    cat quick-test/runnable/arm-tests/system/quick-test.log ;
    else
    cat quick-test/quick-test-red.log ;
    printf '\n\n\n\n' ;
    cat quick-test/quick-test.log ;
    fi


# Notify build status
# after_script:
#   - curl ${URL}/${OS}/${STATUS}
